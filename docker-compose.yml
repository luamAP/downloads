version: '3'
services:
  rails:
    # ALTERAÃ‡ÃƒO 1: Construir a imagem localmente usando nosso Dockerfile
    build: .
    image: chatwoot-custom:latest
    volumes:
      - 'storage:/app/storage'
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - DEFAULT_LOCALE=pt_BR
      - 'FRONTEND_URL=${FRONTEND_URL}'
      - 'INTERNAL_HOST_URL=http://rails:3000'
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - 'POSTGRES_USERNAME=${SERVICE_USER_POSTGRES}'
      - 'POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}'
      - 'POSTGRES_DATABASE=${POSTGRES_DB:-chatwoot_production}'
      - 'SECRET_KEY_BASE=${SERVICE_PASSWORD_64_SECRETKEYBASE}'
      - 'REDIS_URL=redis://redis:6379'
      - 'REDIS_PASSWORD=${SERVICE_PASSWORD_REDIS}'
      - 'BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME=${BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME:-Chatwoot}'
      - 'BAILEYS_PROVIDER_DEFAULT_URL=http://baileys-api:3025'
      - 'BAILEYS_PROVIDER_DEFAULT_API_KEY=${SERVICE_PASSWORD_64_DEFAULTAPIKEY}'
      - BAILEYS_PROVIDER_USE_INTERNAL_HOST_URL=true
      - 'MAILER_SENDER_EMAIL=${MAILER_SENDER_EMAIL}'
      - 'RESEND_API_KEY=${RESEND_API_KEY}'

      - INSTALLATION_NAME=${INSTALLATION_NAME}
      - BRAND_NAME=${BRAND_NAME}
      - BRAND_PRIMARY_COLOR=${BRAND_PRIMARY_COLOR}
      - BRAND_ASSETS_URL=${BRAND_ASSETS_URL}

    entrypoint: docker/entrypoints/rails.sh
    command: >
      sh -c "
        echo 'ðŸš€ Waiting for database to be ready...'
        /app/docker/wait-for-postgres.sh
        echo 'ðŸ‘Ÿ Preparing database...'
        bundle exec rails db:chatwoot_prepare
        echo 'ðŸŽ¨ Applying custom branding...'
        bundle exec rails branding:update
        deployment/extract_brand_assets.sh
        echo 'ðŸ§¹ Cleaning old assets...'
        bundle exec rails assets:clobber
        echo 'ðŸ“¦ Compiling new assets (this will take a while)...'
        # ADICIONE A LINHA ABAIXO:
        NODE_OPTIONS=--max-old-space-size=4096 bundle exec rails assets:precompile RAILS_ENV=production
        echo 'âœ… All setup steps complete. Starting Chatwoot server...'
        exec bundle exec rails s -p 3000 -b 0.0.0.0
      "
    restart: always
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- --header="Accept: text/html" http://127.0.0.1:3000/'
      interval: 60s
      timeout: 20s
      retries: 10
      # Adicionado para dar tempo para a compilaÃ§Ã£o inicial
      start_period: 600s
  sidekiq:
    # ALTERAÃ‡ÃƒO 1: Usar a mesma imagem customizada
    image: chatwoot-custom:latest
    volumes:
      - 'storage:/app/storage'
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - DEFAULT_LOCALE=pt_BR
      - 'FRONTEND_URL=${FRONTEND_URL}'
      - 'INTERNAL_HOST_URL=http://rails:3000'
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - 'POSTGRES_USERNAME=${SERVICE_USER_POSTGRES}'
      - 'POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}'
      - 'POSTGRES_DATABASE=${POSTGRES_DB:-chatwoot_production}'
      - 'SECRET_KEY_BASE=${SERVICE_PASSWORD_64_SECRETKEYBASE}'
      - 'REDIS_URL=redis://redis:6379'
      - 'REDIS_PASSWORD=${SERVICE_PASSWORD_REDIS}'
      - 'BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME=${BAILEYS_PROVIDER_DEFAULT_CLIENT_NAME:-Chatwoot}'
      - 'BAILEYS_PROVIDER_DEFAULT_URL=http://baileys-api:3025'
      - 'BAILEYS_PROVIDER_DEFAULT_API_KEY=${SERVICE_PASSWORD_64_DEFAULTAPIKEY}'
      - BAILEYS_PROVIDER_USE_INTERNAL_HOST_URL=true
      - 'MAILER_SENDER_EMAIL=${MAILER_SENDER_EMAIL}'
      - 'RESEND_API_KEY=${RESEND_API_KEY}'

      - INSTALLATION_NAME=${INSTALLATION_NAME}
      - BRAND_NAME=${BRAND_NAME}
      - BRAND_PRIMARY_COLOR=${BRAND_PRIMARY_COLOR}
      - BRAND_ASSETS_URL=${BRAND_ASSETS_URL}
    command:
      - bundle
      - exec
      - sidekiq
      - '-C'
      - config/sidekiq.yml
    restart: always
    healthcheck:
      test:
        - CMD-SHELL
        - 'ps aux | grep [s]idekiq'
      interval: 20s
      timeout: 20s
      retries: 10
  postgres:
    image: 'ghcr.io/fazer-ai/postgres-16-pgvector:latest'
    restart: always
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    environment:
      - 'POSTGRES_DB=${POSTGRES_DB:-chatwoot_production}'
      - 'POSTGRES_USER=${SERVICE_USER_POSTGRES}'
      - 'POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -h localhost -p 5432 -U $${POSTGRES_USER} -d $${POSTGRES_DB}'
      interval: 20s
      timeout: 20s
      retries: 10
  redis:
    image: 'redis:alpine'
    restart: always
    command:
      - sh
      - '-c'
      - 'redis-server --requirepass "${SERVICE_PASSWORD_REDIS}"'
    volumes:
      - 'redis:/data'
    environment:
      - 'REDIS_PASSWORD=${SERVICE_PASSWORD_REDIS}'
    healthcheck:
      test:
        - CMD-SHELL
        - 'redis-cli -h localhost -p 6379 -a $${REDIS_PASSWORD} ping'
      interval: 20s
      timeout: 20s
      retries: 10
  baileys-api:
    image: 'ghcr.io/fazer-ai/baileys-api:latest'
    volumes:
      - 'storage:/app/storage'
    environment:
      - NODE_ENV=production
      - 'REDIS_URL=redis://redis:6379'
      - 'REDIS_PASSWORD=${SERVICE_PASSWORD_REDIS}'
      - 'LOG_LEVEL=${LOG_LEVEL:-debug}'
      - 'BAILEYS_LOG_LEVEL=${BAILEYS_LOG_LEVEL:-error}'
      - 'BAILEYS_PROVIDER_DEFAULT_API_KEY=${SERVICE_PASSWORD_64_DEFAULTAPIKEY}'
    command:
      - sh
      - '-c'
      - 'bun manage-api-keys create user ${SERVICE_PASSWORD_64_DEFAULTAPIKEY} && bun start'
    restart: always
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- http://localhost:3025/status'
      interval: 20s
      timeout: 20s
      retries: 10

# Adicionado para gerenciar os volumes
volumes:
  postgres:
  redis:
  storage: